---
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Create directory for Docker's GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Print architecture variables
      ansible.builtin.debug:
        msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        filename: docker
        state: present

    - name: Add HashiCorp GPG Key
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present

    
    - name: Add HashiCorp APT repository
      apt_repository:
        repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"

    - name: Install packages
      ansible.builtin.apt:
        name:
          - git
          - bashtop
          - vim
          - gcc
          - tmux
          - make
          - patch
          - bzip2
          - libnsl2
          - fd-find
          - autoconf
          - inotify-tools
          - toilet
          - fzf
          - ffmpeg
          - vlc
          - imagemagick
          - gstreamer1.0-tools
          - build-essential
          - openssh-client
          - openvpn
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
        
        #          - vagrant
#          - python3
        state: present


    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to Docker group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true

    - name: Enable and start Docker services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service

    - name: Install Terraform
      apt:
        name: terraform
        state: present


    - name: Check if an NVIDIA card is present
      shell: "lspci | grep -i nvidia"
      register: nvidia_card
      changed_when: false
      ignore_errors: true
    
    # Block to handle NVIDIA card detection and setup
    - block:

        - name: Debug NVIDIA card presence
          debug:
            msg: "NVIDIA card found: {{ nvidia_card.stdout }}"

        - name: Add the graphics-drivers PPA repository (if NVIDIA card is present)
          apt_repository:
            repo: ppa:graphics-drivers/ppa
            state: present

        - name: Update apt cache after adding repository (deferred until after the check)
          apt:
            update_cache: yes

        - name: Find the recommended NVIDIA driver version
          shell: "ubuntu-drivers devices | grep recommended | awk '{print $3}'"
          register: latest_nvidia_version
          changed_when: false

        - name: Debug latest NVIDIA driver version
          debug:
            msg: "Recommended NVIDIA driver: {{ latest_nvidia_version.stdout }}"

        - name: Ask for confirmation to install the NVIDIA driver
          pause:
            prompt: "NVIDIA driver {{ latest_nvidia_version.stdout }} will be installed. Do you want to continue? (yes/no)"
          register: install_confirmation

        - name: Set fact to skip driver installation if not confirmed
          set_fact:
            install_driver: "{{ 'yes' if install_confirmation.user_input == 'yes' else 'no' }}"


      when: nvidia_card.stdout != ""
      name: NVIDIA Card Detection and Setup Block
      rescue:
        - debug:
            msg: "No NVIDIA card detected or an error occurred during detection. Skipping NVIDIA driver installation."

    # Block to handle the NVIDIA driver installation
    - block:
        - name: Install the recommended NVIDIA driver
          apt:
            name: "{{ latest_nvidia_version.stdout }}"
            state: present

        - name: Ensure the driver is loaded correctly
          command: "nvidia-smi"
          register: nvidia_smi_output
          ignore_errors: yes

        - name: Reboot the system if NVIDIA drivers were installed
          reboot:
            msg: "Rebooting to apply NVIDIA drivers."
      when: install_driver == "yes"
      name: NVIDIA Driver Installation Block
      rescue:
        - debug:
            msg: "NVIDIA driver installation failed, but continuing with other tasks."
