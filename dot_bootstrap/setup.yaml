---
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true

  vars:
    - googlechrome_desired_state: latest
    - terraform_version: 0.12.0-rc1
    - nvidia_driver_skip_reboot: true
    - ansible_distribution: Ubuntu
  
  roles:
    - googlechrome
    - terraform
    - vagrant
    - virtualbox
    - docker
    - docker-compose
    - gping
    - zoom

  tasks:

    - name: Install packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - asciinema
          - autoconf
          - bashtop
          - build-essential
          - bzip2
          - ca-certificates
          - containerd.io
          - curl
          - fd-find
          - ffmpeg
          - gcc
          - git
          - gnupg
          - gstreamer1.0-tools
          - imagemagick
          - inotify-tools
          - libnsl2
          - make
          - openssh-client
          - openvpn
          - patch
          - software-properties-common
          - tmux
          - tree
          - toilet
          - vim
          - virtualbox-dkms
          - vlc
          - chrome-gnome-shell
        
        #          - vagrant
#          - python3
        state: present

#    - name: Check if an NVIDIA card is present
#      shell: "lspci | grep -i nvidia"
#      register: nvidia_card
#      changed_when: false
#      ignore_errors: true
#    
#    # Block to handle NVIDIA card detection and setup
#    - block:
#
#        - name: Debug NVIDIA card presence
#          debug:
#            msg: "NVIDIA card found: {{ nvidia_card.stdout }}"
#
#        - name: Add the graphics-drivers PPA repository (if NVIDIA card is present)
#          apt_repository:
#            repo: ppa:graphics-drivers/ppa
#            state: present
#
#        - name: Update apt cache after adding repository (deferred until after the check)
#          apt:
#            update_cache: yes
#
#        - name: Find the recommended NVIDIA driver version
#          shell: "ubuntu-drivers devices | grep third-party | grep -v open | sort -r | head -n 1 | awk '{print $3}'"
#          register: latest_nvidia_version
#          changed_when: false
#
#        - name: Debug latest NVIDIA driver version
#          debug:
#            msg: "Recommended NVIDIA driver: {{ latest_nvidia_version.stdout }}"
#
#        - name: Ask for confirmation to install the NVIDIA driver
#          pause:
#            prompt: "NVIDIA driver {{ latest_nvidia_version.stdout }} will be installed. Do you want to continue? (yes/no)"
#          register: install_confirmation
#
#        - name: Set fact to skip driver installation if not confirmed
#          set_fact:
#            install_driver: "{{ 'yes' if install_confirmation.user_input == 'yes' else 'no' }}"
#
#
#      when: nvidia_card.stdout != ""
#      name: NVIDIA Card Detection and Setup Block
#      rescue:
#        - debug:
#            msg: "No NVIDIA card detected or an error occurred during detection. Skipping NVIDIA driver installation."
#
#    # Block to handle the NVIDIA driver installation
#    - block:
#        - name: Install the recommended NVIDIA driver
#          apt:
#            name: "{{ latest_nvidia_version.stdout }}"
#            state: present
#
#        - name: Ensure the driver is loaded correctly
#          command: "nvidia-smi"
#          register: nvidia_smi_output
#          ignore_errors: yes
#
#        - name: Reboot the system if NVIDIA drivers were installed
#          reboot:
#            msg: "Rebooting to apply NVIDIA drivers."
#      when: install_driver == "yes"
#      name: NVIDIA Driver Installation Block
#      rescue:
#        - debug:
#            msg: "NVIDIA driver installation failed, but continuing with other tasks."

#    # FZF
#    - name: make sure git is installed
#      package:
#        name: git
#        state: present
#    
#    - name: fetch fzf from github
#      git:
#        repo: 'https://github.com/junegunn/fzf.git'
#        dest: /tmp/fzf/
#        version: HEAD # latest
#      become: no
#    
#    - name: Mark /tmp/fzf as a safe directory
#      command: git config --global --add safe.directory /tmp/fzf
#      become: no
#    
#    - name: Run install script
#      script: /tmp/fzf/install --all
#      become: no

    - name: Install Flatpak package manager (if not already installed)
      apt:
        name: flatpak
        state: present

    - name: Add the Flathub repository (if not already added)
      command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      args:
        creates: /var/lib/flatpak/repo/flathub
      become: no

    - name: Install Slack using Flatpak
      flatpak:
        name: com.slack.Slack
        state: present
        remote: flathub
        method: user  # or system if you prefer system-wide installation
      become: no

    - name: Verify Slack installation
      command: flatpak run com.slack.Slack --version
      register: slack_version
      ignore_errors: yes
      become: no

    - name: Debug Slack version output
      debug:
        msg: "Installed Slack version: {{ slack_version.stdout }}"
